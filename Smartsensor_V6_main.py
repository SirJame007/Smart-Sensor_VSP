#‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ DataFrame ‡∏¢‡πà‡∏≠ pd 
import pandas as pd
#‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ó‡∏≤‡∏á‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏ó‡∏µ‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
import numpy as np

file_path = 'Somjai888_SoilMoisture_2025-07-21.csv' #‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
MIN_HOURS = 1.5 #‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
MIN_REPEAT_COUNT = 20 #‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏≤ Slope
RISE_THRESHOLD = 3 # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô ‡∏à‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ-‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î < RISE_THRESHOLD
WINDOW_SIZE = 50 # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏à‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Slope 
SLOPE_THRESHOLD = 0 # ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏ô‡∏¥‡πà‡∏á"

#WP ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏∑‡∏ä‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏î‡∏¥‡∏ô‡∏Ç‡∏≤‡∏î‡∏ô‡πâ‡∏≥ FC ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏â‡∏∞
#‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏î‡∏¥‡∏ô ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà 7 ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡∏ä‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ FC ‡πÅ‡∏•‡∏∞ PWP ‡∏´‡∏ô‡πâ‡∏≤ 71
#Pv ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡∏ä‡∏î‡∏π‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ % ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£ ‡∏´‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å Pv = Pw(%‡∏ô‡∏ô.‡∏î‡∏¥‡∏ô‡πÅ‡∏´‡πâ‡∏á)*As(‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞)
#As ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÇ‡∏î‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£


#‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏° Value ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡πà‡∏≤‡∏≠‡∏ô‡∏±‡∏ô‡∏ï‡πå‡πÉ‡∏´‡πâ‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• index ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
def clean_data(df):
    """‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤ NaN ‡πÅ‡∏•‡∏∞ inf ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å DataFrame"""
    return df.replace([np.inf, -np.inf], np.nan).dropna(subset=['value']).reset_index(drop=True)
def find_valid_peak(df, min_hours, min_repeat_count, window_size, slope_threshold):
    if df.empty:
        return None, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á"
    df = clean_data(df)
    if df.empty:
        return None, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏ö NaN/inf"
    
#‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô value*10 ‡πÄ‡∏Å‡πá‡∏ö‡∏ó‡∏µ‡πà value_int
    df['value_int'] = (df['value'] * 10).astype(int)
#‡∏´‡∏≤ Index ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'value_int' ‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î(idxmax) Index ‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ peak_idx
    peak_idx = df['value_int'].idxmax()
# ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏ß‡∏•‡∏≤ (timestamp) ‡∏ì ‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏≤‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å peak_idx ‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ peak_time
    peak_time = df.loc[peak_idx, 'unixtimestamp']
#‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‡∏ì ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ peak_value
    peak_value = df.loc[peak_idx, 'value_int']
#‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô peak ‡πÑ‡∏õ‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÅ‡∏ñ‡∏ß‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡πá‡∏≠‡∏õ‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï index ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏≠‡∏≤‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡πà‡∏≠‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
#df.index.get_loc(peak_idx) ‡∏´‡∏≤ ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á (location) ‡∏Ç‡∏≠‡∏á Index ‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ (peak_idx) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö iloc ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏ñ‡∏ß
#df.iloc[...:] ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ
#copy(): ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡∏Å‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô DataFrame ‡πÉ‡∏´‡∏°‡πà ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç segment ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠ df ‡πÄ‡∏î‡∏¥‡∏°.
    segment = df.iloc[df.index.get_loc(peak_idx):].copy().reset_index(drop=True)
# ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏û‡∏µ‡∏Ñ‡∏Å‡πá‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ï‡πà‡∏≠
    if segment.empty:
        return None, "Segment ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á peak"
#"‡πÄ‡∏à‡∏≠‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î ‚Üí ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ ‚Üí ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Ñ‡πà‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    prev_val = peak_value
    for i, row in segment.iloc[1:].iterrows():  #segment.iloc[1:]: ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô DataFrame ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠ segment ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô‡πÑ‡∏õ(‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á 0 ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î Peak) iterrows(): ‡πÄ‡∏õ‡πá‡∏ô‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á Pandas ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡πÉ‡∏ô DataFrame
        diff = row['value_int'] - prev_val  #‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏≤‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á ‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
        if diff >= RISE_THRESHOLD: #RISE_THRESHOLD = 3 # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô ‡∏à‡∏∏‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ-‡∏à‡∏∏‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î < RISE_THRESHOLD
            return None, "‚ùå ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á peak" # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏£‡∏¥‡∏á (‡∏Ñ‡∏∑‡∏≠ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ) ‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏∞‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤ None
        prev_val = row['value_int'] #‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ñ‡∏ß‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ

    # ‡∏´‡∏≤ final point ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Moving Average Slope
    final_index = -1
    repeat_count = 0 #‡∏Ñ‡∏∑‡∏≠‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ô 0 ‡∏Ñ‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ô‡∏±‡∏ö
    prev_val_for_repeat = segment['value_int'].iloc[0]
    for idx in range(1, len(segment)):
        if segment['value_int'].iloc[idx] == prev_val_for_repeat:
            repeat_count += 1
        else:
            repeat_count = 0
            prev_val_for_repeat = segment['value_int'].iloc[idx]
    # ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏•‡∏π‡∏õ‡∏¢‡πà‡∏≠‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏ô
        if repeat_count >= min_repeat_count:
            last_decreasing_index = -1
            for sub_idx in range(idx, len(segment)):
                if sub_idx >= window_size:
                    window_df = segment.loc[sub_idx - window_size:sub_idx]
                    x = window_df.index
                    y = window_df['value_int']
                    if len(x) > 1:
                        slope, _ = np.polyfit(x, y, 1)
                        if slope < slope_threshold:
                            last_decreasing_index = sub_idx
                        elif last_decreasing_index != -1:
                            final_index = last_decreasing_index
                            break
            if final_index != -1:
                break

    if final_index == -1:
        final_index = len(segment) - 1
    # üîπ ‡∏ñ‡∏≠‡∏¢‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏Ñ‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö final_index
    final_val = segment['value_int'].iloc[final_index]
    for back_idx in range(final_index):
        if segment['value_int'].iloc[back_idx] == final_val:
            final_index = back_idx
            break
    final_time = segment.loc[final_index, 'unixtimestamp']
    duration_hours = (final_time - peak_time).total_seconds() / 3600.0
    if duration_hours >= min_hours:
        return segment.loc[:final_index].copy(), "‚úÖ ‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ß‡∏•‡∏≤"
    else:
        return None, "‚ùå ‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ß‡∏•‡∏≤"  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏û‡∏¥‡πà‡∏° return statement ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
# ===== ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• =====
try:
    df = pd.read_csv(file_path)
    df['unixtimestamp'] = pd.to_datetime(df['unixtimestamp'], unit='s') + pd.Timedelta(hours=7)
    df.sort_values(by='unixtimestamp', inplace=True)
    df.reset_index(drop=True, inplace=True)
except FileNotFoundError:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: {file_path}")
    exit()
except Exception as e:
    print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")
    exit()

valid_segment = None
while MIN_REPEAT_COUNT >= 5 and valid_segment is None:
    print(f"\n--- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏î‡πâ‡∏ß‡∏¢ MIN_REPEAT_COUNT = {MIN_REPEAT_COUNT} ---")
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
    try:
        df = pd.read_csv(file_path)
        df['unixtimestamp'] = pd.to_datetime(df['unixtimestamp'], unit='s') + pd.Timedelta(hours=7)
        df.sort_values(by='unixtimestamp', inplace=True)
        df.reset_index(drop=True, inplace=True)
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {e}")
        break   
    data_search = clean_data(df)
    round_num = 1
    while not data_search.empty:
        segment, reason = find_valid_peak(data_search, MIN_HOURS, MIN_REPEAT_COUNT, WINDOW_SIZE, SLOPE_THRESHOLD) 
        if segment is not None:
            valid_segment = segment
            print(f"‚úÖ ‡∏û‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡πâ‡∏ß‡∏¢ MIN_REPEAT_COUNT = {MIN_REPEAT_COUNT}")
            print(reason)
            break
        else:
            #print(f"‚ùå ‡∏£‡∏≠‡∏ö‡∏ó‡∏µ‡πà {round_num}: {reason}")  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏≠‡∏≤ comment ‡∏≠‡∏≠‡∏Å
            data_search = clean_data(data_search)
            if data_search.empty:
                break
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if len(data_search) == 0:
                break     
            peak_idx = (data_search['value'] * 10).astype(int).idxmax()
            peak_pos = data_search.index.get_loc(peak_idx)           
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á peak ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if peak_pos + 1 >= len(data_search):
                break               
            data_search = data_search.iloc[peak_pos+1:].reset_index(drop=True)
            round_num += 1
    if valid_segment is None:
        #print(f"\n‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ (MIN_REPEAT_COUNT = {MIN_REPEAT_COUNT})")  # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏≠‡∏≤ comment ‡∏≠‡∏≠‡∏Å
        MIN_REPEAT_COUNT -= 5       
# ===== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ =====
if valid_segment is not None:
    print("\nüéØ ‡πÄ‡∏à‡∏≠‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏•‡πâ‡∏ß:")
    print(valid_segment)  
    # ‚úÖ ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
    peak_time = valid_segment.iloc[0]['unixtimestamp']
    final_time = valid_segment.iloc[-1]['unixtimestamp']   
    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
    evaporation_duration_hours = (final_time - peak_time).total_seconds() / 3600.0
    print(f"\n‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡πÄ‡∏´‡∏¢‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥‡∏à‡∏≤‡∏Å‡∏î‡∏¥‡∏ô: {evaporation_duration_hours:.2f} ‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")   
    peak_value = valid_segment.iloc[0]['value']
    final_value = valid_segment.iloc[-1]['value']
    if evaporation_duration_hours > 2:
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì SDR 
        SDR = (peak_value - final_value) / evaporation_duration_hours
        print(f"‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡πÄ‡∏´‡∏¢‡∏Ç‡∏≠‡∏á‡∏ô‡πâ‡∏≥ (SDR): {SDR:.2f} % ‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á")       
        if  SDR >= 2:
            soil_type = "‡∏î‡∏¥‡∏ô‡∏ó‡∏£‡∏≤‡∏¢"
        elif 0.5 <= SDR < 2:
            soil_type = "‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô"
        elif SDR < 0.5:
            soil_type = "‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß"
        else: 
            soil_type = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"
        print(f"‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏î‡∏¥‡∏ô: {soil_type}")

#WP ‡∏Ñ‡∏∑‡∏≠‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏û‡∏∑‡∏ä‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏´‡∏µ‡πà‡∏¢‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏î‡∏¥‡∏ô‡∏Ç‡∏≤‡∏î‡∏ô‡πâ‡∏≥ FC ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏î‡∏¥‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÅ‡∏â‡∏∞
#‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å ‡∏Ñ‡∏π‡πà‡∏°‡∏∑‡∏≠‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏î‡∏¥‡∏ô ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏ó‡∏µ‡πà 7 ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡∏ä‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ FC ‡πÅ‡∏•‡∏∞ PWP ‡∏´‡∏ô‡πâ‡∏≤ 71
#Pv ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡∏ä‡∏î‡∏π‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ % ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£ ‡∏´‡∏≤‡∏°‡∏≤‡∏à‡∏≤‡∏Å Pv = Pw(%‡∏ô‡∏ô.‡∏î‡∏¥‡∏ô‡πÅ‡∏´‡πâ‡∏á)*As(‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞)
#As ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞‡∏õ‡∏£‡∏≤‡∏Å‡∏è ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÇ‡∏î‡∏¢‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£
        SOIL_PARAMS = {
    "‡∏î‡∏¥‡∏ô‡∏ó‡∏£‡∏≤‡∏¢": {"FC": 0.9, "PWP": 0.4, "Pv": 0.8},  
    "‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô‡∏õ‡∏ô‡∏ó‡∏£‡∏≤‡∏¢": {"FC": 0.14, "PWP": 0.6, "Pv": 0.12},
    "‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô": {"FC": 0.22, "PWP": 0.10, "Pv": 0.17},
    "‡∏î‡∏¥‡∏ô‡∏£‡πà‡∏ß‡∏ô‡∏õ‡∏ô‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß": {"FC": 0.27, "PWP": 0.13, "Pv": 0.19},
    "‡∏î‡∏¥‡∏ô‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß": {"FC": 0.35, "PWP": 0.17, "Pv": 0.23},
}
        params = SOIL_PARAMS[soil_type]
        #‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏•‡∏î‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡πÄ‡∏ß‡∏•‡∏≤ ‡∏ß‡∏±‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
        Dr = (SDR*evaporation_duration_hours) /100  #‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô
        print(f"Dr = {Dr:.2f} % ‡πÉ‡∏ô {evaporation_duration_hours:.2f} ‡∏ä‡∏°. ")  

        #‡∏´‡∏≤‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏ô‡πâ‡∏≥‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≠‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á 
        MDR = Dr / evaporation_duration_hours 
        print(f"MDR : {MDR:.2f} ‡∏ä‡∏°.")

        #Ks ‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏™‡∏±‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏î‡∏ô‡πâ‡∏≥‡∏Ç‡∏≠‡∏á‡∏û‡∏∑‡∏ä (1 = ‡∏ô‡πâ‡∏≥‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠, ‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤ 1 = ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏ô‡πâ‡∏≥)
        #TAW ‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡∏ä‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ (TAW = FC ‚àí WP)
        #RAW ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡∏ô‡πâ‡∏≥‡∏ó‡∏µ‡πà‡∏û‡∏∑‡∏ä‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î (RAW = p √ó TAW, p ‡∏Ñ‡∏∑‡∏≠‡∏™‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏∑‡∏ä‡∏ó‡∏ô‡πÑ‡∏î‡πâ)
        TAW = params['FC'] - params['PWP']
        RAW = params['Pv'] * TAW   
        #Allen(Allen et. al., 1998
        #‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ñ‡πà‡∏≤ Ks ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ
        Ks = (TAW - Dr) / (TAW - RAW)
        if 0.95 <= Ks <= 1:
            Ks_Alarm = "‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ ‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢"
        elif 0.7 <= Ks < 0.95:
            Ks_Alarm =  "‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏î ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏î‡∏ô‡πâ‡∏≥"
        elif 0.4 <= Ks < 0.7:
            Ks_Alarm = "‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≥ ‡∏û‡∏∑‡∏ä‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏Ñ‡∏£‡∏µ‡∏¢‡∏î‡∏ô‡πâ‡∏≥ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥"
        elif Ks < 0.4:
            Ks_Alarm = "‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡∏ï‡πà‡∏≥‡∏°‡∏≤‡∏Å ‡∏û‡∏∑‡∏ä‡∏Ç‡∏≤‡∏î‡∏ô‡πâ‡∏≥ ‡∏£‡∏î‡∏ô‡πâ‡∏≥‡∏ó‡∏±‡∏ô‡∏ó‡∏µ!"
        else:
            Ks_Alarm =  "‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏î‡∏¥‡∏ô‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏£‡∏î‡∏ô‡πâ‡∏≥‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ"
        print(f"Ks = {Ks:.2f}, Ks_Alarm {Ks_Alarm}") 
else:
        soil_type = "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"